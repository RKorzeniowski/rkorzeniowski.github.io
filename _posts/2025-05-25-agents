# Why are Agents so hot?

Agents are the hot topic of recent days? Why is that? The main use case for AI so far (at least till 2024 before chatbots 
got agentified with tools) was this type of assistant that helps you solve simple problems you throw at it. 
It is very knowledgeable but as soon as you ask it to do something that requires a bit of common sense and "googling" 
it fails miserably. Either making things up or providing inaccurate information. Let's take as an example trip planning

When asked to come up with itinerary with estimated budget for trip in a week we can expect AI will give us made up 
flights with price estimate unrelated to current price (and let's not dream about it finding best deal for us), 
types of attractions a list of most typical activities not necessarily available at the time of our trip and so on.
If we "digest it a little bit" and ask for specific season it will usually do a little better but still might recommend
things that were closed. I will later talk about how agentic approach addresses some of these issues.

More recently companies stated a goal of automating junior developers. Copilot etc. 
There was significant progress in this field. From AI having a hard time writing doc strings, 
through tests being written just based on test  docstring written by developer and interfaces and existing codebase, 
to most recently impressive improvements to existing algorithms and coming up with new ones (EvolveAlpha). 
Last one being more about blend of evolutionary algorithms and ? but agentic concept that happened along the way and 
how they impacted the dynamic are still interesting.

Finally the most recent document released by Google proposing the concept of an independent "agentic contractor" 
and explaining how multi agent fits into the picture.

All of the above developments motivated me to refresh and extend my vocabulary and understanding. 
So in this post I'll be going over 1) what are agents and most basic concepts related to them 2) how do they differ 
from standard chatbots 3) why multi agent approach and defining contracts is such a big deal 4) go over concrete example 
using CrewAI to explain how above mentioned concepts play together

## How agent differs from chatbot?
Well, this is a bit of an ill posed question but I think this is something that can be easily confused. 
Chatbots can be agentic. Chatbot is w use case while agent is solution paradigma. So there are agentic and 
non-agentic chatbots. The agentic systems are characterized by an ability to interact with the environment using tools.

Tool can be anything. From simple things like calculator (yes, they come in handy even for LLMs) 
to quite an advance like a web browser.

They allow for dynamic input that is not easy to "remember" and is usually not available in the input prompt. 
You can probably already see how having a web browser that will  return most up to date price for flight ticket 
for any date requested makes life of an LLM much easier

The problem is that even with amazing tools our LLM will still struggle with coming up with the idea to ask tool for this 
information (idea of Chain of thought will help us here but let's ignore it for now) in the first place and with an 
abundance of information provided to it. This is where the concept of multiple agents comes in with decomposition and 
orchestration

(agent consists of brain -> LLM that gives it a way to think, tools that "brain" can use, and orchestration if we talk about
more than single agent)


Building Blocks of an Agent
- ML model e.g. LLM
- - Central decision making (general, multimodal, finetuned)
  - Instruction based reasoning
  - Logical Framework
- Tools
- - bridge internal/external capabiliteis
  - faciliate interactions with data/services
  - access/process real world informaton
  - types: extension, functions, data stores
- Orchestration Layer
- - cyclical process
  - assimilate information
  - internal reasoning
  - leverage reasoning for action/decision
  - maintain memory, state, planning
  - uses prompt eng framework
  - reasoning like ReAct, Chain-of-Thought (CoT), Tree-of-Thought (ToT)

Multi-Agent Systems
- team of experts, each specilizes, has unique role/context
- independent entities e.g. different LLMs
- communicate/collaborate/coordinate for common goal

Advantages over single agent



* definition of an agent
	* achieve specific objectives
	* perceive environment
	* act using tools
	* apply logic and reasoning to external information
	* autonomous operation


* building blocks of an agent
  * ML model e.g. LLM
  * Central decision making (general, multimodal, finetuned)
    * Instruction based reasoning
    * Logical Framework
  
  * orchestration layers
  	* cyclical process
  	* assimilate information
  	* internal reasoning
  	* reasoning for action/decision
  	* maintain memory/state planning
  	* use prompt eng frameworks 
  	* reasoning techniques
  	  * CoT - single paths of reasoning
  	  * ToT - explores multiple paths of reasoning
  	  * ReAct - paradigma combining verbal reasoning with acting
    
  * agents ops
  	* tool management 
  	* agent brain prompt (goal, profile, instrucitons)
  	* task decomposition
  
* multi-agent aspect
  * specialized agents collaboration
      * team of experts - break down problems into distinct tasks
      * each has unique role/context by function - dynamic interactions, structured reasoning, decentralized problem solving (modularity, collaboration, hierarchy)
      * independent entities - adaptive/efficient, you don't need to run all agents for every task
      * communication/collaboration toward common goal - explainable due logs of agents communication, beyond prompt-based interaction (? what does it mean exactly)
  * advantages over single agent
      * better acc/fault tolerance (cross checking/other agents fixes)
      * efficiency/scalability (parallel work/add more agents)
      * better handling of complex tasks (decomposition)
      * reduced hall/bias (multi perspective)
  * components
      * cognitive functionality - self-correction, user intent refinement, planning, ReAct, CoT
      * tool integration - dynamic tool registers, Tool RAG
      * flow/routing - connections, neighbor discovery, communication, delegation, hand-off, agent as tool
      * feedback loops/RL - continuous learning, adapting decision-making
      * agent/tool registry - mesh, discover, register, administer, select, utilize

  * agentic RAG
      * improve retrieval by: decomposed query, dynamically select best source, validation/error correction (evaluator agents check for hall/contradictions), context-aware query expansion, 
      * RAGs need search engines
  * enterprise
      * types
          * assistant - interacts with user. executes tasks
          * contractor - fulfill defined outcomes
          * manager of agents
      * reaching contractors
          * need for standardized contracts between requester and agents
          * advantages
              * defines outcomes precisely (validate, iterate)
              * negotiate/classify task (avoiding ambiguity, fill out gaps)
              * define rules for subcontracts
	* agent types
	    * planner agent - breaks down high level objectives into subtasks
	    * retriver agent - knowledge acquisition from dynamic sources
	    * execution agent - performs computations, generates responses, interacts with APIs
	    * evaluator agent - make sure responses are valid, consistent, coherent, relevant

* evaluations
  * agent success metrics
      * goal completion rate
      * critical task/interaction completion
      * attempts success rate
      * latency
  * components
      * accessing agent capabilities
          * BFCL, Ï„-bench (tool calling), PlanBench (planning/reasoning), AgentBench (end-to-end), DABStep (Data Analyst)
          * LLM/components metrics
              * conversational workflow metrics
      * trajectory and tool use
          * expected vs actual trajectory - tool choice, strategies, efficiency (requires reference trajectory)
              * exact math
              * any/in-order match
              * precision/recall
      * evaluating final response
  * way to go about it
      * automatic metrics
      * subjective
      * LLM as a judge
  * continual improvement of evaluation framework is essential
  * multiagent evals:
    * cooperation/coordination
    * planning task and task assignment
    * agent utilization


My Thoughts
This will change the way people interact with unknown. No longer googling simple terms in search engines but ask agent to
understand complex situation and provide relevant response. There is an interesting point to be made about how changing informaiton environment impacts today's society. 
Types of mental tasks we peform are belived to improve our capabilities. There is a long lasting theory (link book) that tools that offload our brain from performing these tasks cause
us to lose skills and make us stupid. Before internet main hardship was obtaining information. Contributing to persistance and creativity. Although when the internet age got into full swing
obtaining information was no longer a problem but reliability of this information became an issue. Suddenly next generations are faced with new types of challanges.
How to quickly filter and verify. This looks like a great motivation to exercise critical thinking skills and improve with how we decompose complex tasks
into simple queries to which web can provide relevant information. In the age of agentic AI that can digest complex tasks skills like task decompositon will be no longer
needed. Similarly low-level coding that was pushing humans to perform cognitively demanding task of "thinking like a machine" is no longer as common. Currently 
conventional coding might meet the same fate of become a specialist skill. What's interesting to me is not predicting how developments like vibe coding will fail but how 
its potential success can influence this skill evolution dynamic. Getting this power of generative AI seems like something that in positive scenario could empower
developers to build complete more emersive than before experiences without it being resource intensive. Creativity and high level thinking skills of artists even with limited level of technical skills
could become very precious and a huge driver for innovation. 

   
* future
    * long-term memory
    * agent communication protocols
    * from agents to contractors


